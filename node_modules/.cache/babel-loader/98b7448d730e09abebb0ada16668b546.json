{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh_HD/developer/react/incubator/ignat/src/p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.tsx\";\nimport React from \"react\";\nimport s from \"./SuperCheckbox.module.css\"; // тип пропсов обычного инпута\n\nconst SuperCheckbox = ({\n  type,\n  // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n  onChange,\n  onChangeChecked,\n  className,\n  spanClassName,\n  children,\n  // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n  ...restProps // все остальные пропсы попадут в объект restProps\n\n}) => {\n  const onChangeCallback = e => {\n    onChange // если есть пропс onChange\n    && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n    onChangeChecked && onChangeChecked(e.currentTarget.checked);\n  };\n\n  const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\n  return /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    type: \"checkbox\",\n    className: finalInputClassName,\n    onChange: onChangeCallback\n  }, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  })), children && /*#__PURE__*/React.createElement(\"span\", {\n    className: s.spanClassName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 26\n    }\n  }, children)) // благодаря label нажатие на спан передастся в инпут\n  ;\n};\n\nexport default SuperCheckbox;","map":{"version":3,"sources":["/Volumes/Macintosh_HD/developer/react/incubator/ignat/src/p2-homeworks/h4/common/c3-SuperCheckbox/SuperCheckbox.tsx"],"names":["React","s","SuperCheckbox","type","onChange","onChangeChecked","className","spanClassName","children","restProps","onChangeCallback","e","currentTarget","checked","finalInputClassName","checkbox"],"mappings":";AAAA,OAAOA,KAAP,MAAmF,OAAnF;AACA,OAAOC,CAAP,MAAc,4BAAd,C,CAEA;;AAQA,MAAMC,aAA+C,GAAG,CAC9C;AACIC,EAAAA,IADJ;AACU;AACNC,EAAAA,QAFJ;AAGIC,EAAAA,eAHJ;AAIIC,EAAAA,SAJJ;AAKIC,EAAAA,aALJ;AAMIC,EAAAA,QANJ;AAMc;AAEV,KAAGC,SARP,CAQgB;;AARhB,CAD8C,KAW7C;AAEP,QAAMC,gBAAgB,GAAKC,CAAF,IAAwC;AAC/DP,IAAAA,QAAQ,CAAC;AAAD,OACLA,QAAQ,CAACO,CAAD,CADX,CAD+D,CAE/C;;AAEhBN,IAAAA,eAAe,IAAIA,eAAe,CAAEM,CAAC,CAACC,aAAF,CAAgBC,OAAlB,CAAlC;AACD,GALD;;AAOA,QAAMC,mBAAmB,GAAI,GAAEb,CAAC,CAACc,QAAS,IAAGT,SAAS,GAAGA,SAAH,GAAe,EAAG,EAAxE;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,IAAI,EAAK,UADb;AAGI,IAAA,SAAS,EAAKQ,mBAHlB;AAII,IAAA,QAAQ,EAAKJ;AAJjB,KAKQD,SALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,EAQKD,QAAQ,iBAAI;AAAM,IAAA,SAAS,EAAEP,CAAC,CAACM,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCC,QAAnC,CARjB,CADJ,CAUa;AAVb;AAYH,CAlCD;;AAoCA,eAAeN,aAAf","sourcesContent":["import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, useState} from \"react\";\nimport s from \"./SuperCheckbox.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\n    onChangeChecked?: (checked: boolean) => void\n    spanClassName?: string\n};\n\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\n          {\n              type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n              onChange,\n              onChangeChecked,\n              className,\n              spanClassName,\n              children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\n\n              ...restProps// все остальные пропсы попадут в объект restProps\n          }\n      ) => {\n\n    const onChangeCallback = ( e: ChangeEvent<HTMLInputElement> ) => {\n      onChange // если есть пропс onChange\n      && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n      onChangeChecked && onChangeChecked( e.currentTarget.checked);\n    }\n\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\n\n    return (\n        <label>\n            <input\n                type = { \"checkbox\" }\n\n                className = { finalInputClassName }\n                onChange = { onChangeCallback }\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\n            />\n            {children && <span className={s.spanClassName}>{children}</span>}\n        </label> // благодаря label нажатие на спан передастся в инпут\n    );\n}\n\nexport default SuperCheckbox;"]},"metadata":{},"sourceType":"module"}