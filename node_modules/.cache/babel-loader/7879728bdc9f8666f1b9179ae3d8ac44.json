{"ast":null,"code":"import _objectWithoutProperties from\"/Volumes/Macintosh_HD/developer/react/incubator/ignat/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import React from\"react\";import s from\"./SuperInputText.module.css\";// тип пропсов обычного инпута\nvar SuperInputText=function SuperInputText(_ref){var type=_ref.type,onChange=_ref.onChange,onChangeText=_ref.onChangeText,onKeyPress=_ref.onKeyPress,onEnter=_ref.onEnter,error=_ref.error,className=_ref.className,spanClassName=_ref.spanClassName,inputClassName=_ref.inputClassName,restProps=_objectWithoutProperties(_ref,[\"type\",\"onChange\",\"onChangeText\",\"onKeyPress\",\"onEnter\",\"error\",\"className\",\"spanClassName\",\"inputClassName\"]);var onChangeCallback=function onChangeCallback(e){onChange// если есть пропс onChange\n&&onChange(e);// то передать ему е (поскольку onChange не обязателен)\nonChangeText&&onChangeText(e.currentTarget.value);};var onKeyPressCallback=function onKeyPressCallback(e){onKeyPress&&onKeyPress(e);e.key===\"Enter\"// если нажата кнопка Enter\n&&onEnter// и есть пропс onEnter\n&&onEnter();// то вызвать его\n};var finalSpanClassName=\"\".concat(s.error,\" \").concat(spanClassName?spanClassName:'');var finalInputClassName=\"\".concat(s.errorInput,\" \").concat(className?className:'');// need to fix with (?:) and s.superInput\nreturn/*#__PURE__*/React.createElement(\"div\",{className:s.overlayInput},/*#__PURE__*/React.createElement(\"input\",Object.assign({placeholder:'enter your text',type:\"text\",onChange:onChangeCallback,onKeyPress:onKeyPressCallback,className:finalInputClassName},restProps)),error&&/*#__PURE__*/React.createElement(\"span\",{className:finalSpanClassName},\" \",error,\" \"));};export default SuperInputText;","map":{"version":3,"sources":["/Volumes/Macintosh_HD/developer/react/incubator/ignat/src/p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx"],"names":["React","s","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","inputClassName","restProps","onChangeCallback","e","currentTarget","value","onKeyPressCallback","key","finalSpanClassName","finalInputClassName","errorInput","overlayInput"],"mappings":"gMAAA,MAAOA,CAAAA,KAAP,KAAwF,OAAxF,CACA,MAAOC,CAAAA,CAAP,KAAc,6BAAd,CAEA;AAaA,GAAMC,CAAAA,cAAiD,CAAG,QAApDA,CAAAA,cAAoD,MAUrD,IARGC,CAAAA,IAQH,MARGA,IAQH,CAPGC,QAOH,MAPGA,QAOH,CAPaC,YAOb,MAPaA,YAOb,CANGC,UAMH,MANGA,UAMH,CANeC,OAMf,MANeA,OAMf,CALGC,KAKH,MALGA,KAKH,CAJGC,SAIH,MAJGA,SAIH,CAJcC,aAId,MAJcA,aAId,CAJ6BC,cAI7B,MAJ6BA,cAI7B,CAFMC,SAEN,+IACD,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,CAAD,CAAsC,CAC3DV,QAAS;AAAD,EACLA,QAAQ,CAACU,CAAD,CADX,CACgB;AAEhBT,YAAY,EAAIA,YAAY,CAACS,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAA5B,CACH,CALD,CAMA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACH,CAAD,CAAwC,CAC/DR,UAAU,EAAIA,UAAU,CAACQ,CAAD,CAAxB,CAEAA,CAAC,CAACI,GAAF,GAAU,OAAQ;AAAlB,EACGX,OAAQ;AADX,EAEGA,OAAO,EAFV,CAEc;AACjB,CAND,CAQA,GAAMY,CAAAA,kBAAkB,WAAMlB,CAAC,CAACO,KAAR,aAAkBE,aAAa,CAAGA,aAAH,CAAmB,EAAlD,CAAxB,CAEA,GAAMU,CAAAA,mBAAmB,WAAMnB,CAAC,CAACoB,UAAR,aAAuBZ,SAAS,CAAGA,SAAH,CAAe,EAA/C,CAAzB,CAA8E;AAE9E,mBACI,2BAAK,SAAS,CAAER,CAAC,CAACqB,YAAlB,eACI,2CACI,WAAW,CAAI,iBADnB,CAEI,IAAI,CAAE,MAFV,CAGI,QAAQ,CAAET,gBAHd,CAII,UAAU,CAAEI,kBAJhB,CAKI,SAAS,CAAGG,mBALhB,EAOQR,SAPR,EADJ,CAUMJ,KAAK,eAAI,4BAAM,SAAS,CAAEW,kBAAjB,MAAwCX,KAAxC,KAVf,CADJ,CAeH,CA5CD,CA8CA,cAAeN,CAAAA,cAAf","sourcesContent":["import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\nimport s from \"./SuperInputText.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n    inputClassName?: string\n};\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName, inputClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value);\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        e.key === \"Enter\" // если нажата кнопка Enter\n        && onEnter // и есть пропс onEnter\n        && onEnter(); // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${ spanClassName ? spanClassName : ''}`;\n\n    const finalInputClassName = `${s.errorInput} ${ className ? className : ''}`; // need to fix with (?:) and s.superInput\n\n    return (\n        <div className={s.overlayInput}>\n            <input\n                placeholder = {'enter your text'}\n                type={\"text\"}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={ finalInputClassName }\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            { error && <span className={finalSpanClassName}> { error } </span> }\n        </div>\n\n    );\n}\n\nexport default SuperInputText;\n"]},"metadata":{},"sourceType":"module"}