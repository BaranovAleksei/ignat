{"ast":null,"code":"var _jsxFileName = \"/Volumes/Macintosh_HD/developer/react/incubator/ignat/src/p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx\";\nimport React from \"react\";\nimport s from \"./SuperInputText.module.css\"; // тип пропсов обычного инпута\n\nconst SuperInputText = ({\n  type,\n  // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n  onChange,\n  onChangeText,\n  onKeyPress,\n  onEnter,\n  error,\n  className,\n  spanClassName,\n  inputClassName,\n  ...restProps // все остальные пропсы попадут в объект restProps\n\n}) => {\n  const onChangeCallback = e => {\n    onChange // если есть пропс onChange\n    && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n    onChangeText && onChangeText(e.currentTarget.value);\n  };\n\n  const onKeyPressCallback = e => {\n    onKeyPress && onKeyPress(e);\n    e.key === \"Enter\" // если нажата кнопка Enter\n    && onEnter // и есть пропс onEnter\n    && onEnter(); // то вызвать его\n  };\n\n  const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`;\n  const finalInputClassName = `${s.errorInput} ${className ? className : ''}`; // need to fix with (?:) and s.superInput\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: s.overlayInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    placeholder: 'enter your text',\n    type: \"text\",\n    onChange: onChangeCallback,\n    onKeyPress: onKeyPressCallback,\n    className: finalInputClassName\n  }, restProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  })), error && /*#__PURE__*/React.createElement(\"span\", {\n    className: finalSpanClassName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 24\n    }\n  }, \" \", error, \" \"));\n};\n\nexport default SuperInputText;","map":{"version":3,"sources":["/Volumes/Macintosh_HD/developer/react/incubator/ignat/src/p2-homeworks/h4/common/c1-SuperInputText/SuperInputText.tsx"],"names":["React","s","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","error","className","spanClassName","inputClassName","restProps","onChangeCallback","e","currentTarget","value","onKeyPressCallback","key","finalSpanClassName","finalInputClassName","errorInput","overlayInput"],"mappings":";AAAA,OAAOA,KAAP,MAAwF,OAAxF;AACA,OAAOC,CAAP,MAAc,6BAAd,C,CAEA;;AAaA,MAAMC,cAAiD,GAAG,CACtD;AACIC,EAAAA,IADJ;AACU;AACNC,EAAAA,QAFJ;AAEcC,EAAAA,YAFd;AAGIC,EAAAA,UAHJ;AAGgBC,EAAAA,OAHhB;AAIIC,EAAAA,KAJJ;AAKIC,EAAAA,SALJ;AAKeC,EAAAA,aALf;AAK8BC,EAAAA,cAL9B;AAOI,KAAGC,SAPP,CAOgB;;AAPhB,CADsD,KAUrD;AACD,QAAMC,gBAAgB,GAAIC,CAAD,IAAsC;AAC3DV,IAAAA,QAAQ,CAAC;AAAD,OACLA,QAAQ,CAACU,CAAD,CADX,CAD2D,CAE3C;;AAEhBT,IAAAA,YAAY,IAAIA,YAAY,CAACS,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAA5B;AACH,GALD;;AAMA,QAAMC,kBAAkB,GAAIH,CAAD,IAAwC;AAC/DR,IAAAA,UAAU,IAAIA,UAAU,CAACQ,CAAD,CAAxB;AAEAA,IAAAA,CAAC,CAACI,GAAF,KAAU,OAAV,CAAkB;AAAlB,OACGX,OADH,CACW;AADX,OAEGA,OAAO,EAFV,CAH+D,CAKjD;AACjB,GAND;;AAQA,QAAMY,kBAAkB,GAAI,GAAElB,CAAC,CAACO,KAAM,IAAIE,aAAa,GAAGA,aAAH,GAAmB,EAAG,EAA7E;AAEA,QAAMU,mBAAmB,GAAI,GAAEnB,CAAC,CAACoB,UAAW,IAAIZ,SAAS,GAAGA,SAAH,GAAe,EAAG,EAA3E,CAjBC,CAiB6E;;AAE9E,sBACI;AAAK,IAAA,SAAS,EAAER,CAAC,CAACqB,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AACI,IAAA,WAAW,EAAI,iBADnB;AAEI,IAAA,IAAI,EAAE,MAFV;AAGI,IAAA,QAAQ,EAAET,gBAHd;AAII,IAAA,UAAU,EAAEI,kBAJhB;AAKI,IAAA,SAAS,EAAGG;AALhB,KAOQR,SAPR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADJ,EAUMJ,KAAK,iBAAI;AAAM,IAAA,SAAS,EAAEW,kBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAwCX,KAAxC,MAVf,CADJ;AAeH,CA5CD;;AA8CA,eAAeN,cAAf","sourcesContent":["import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\nimport s from \"./SuperInputText.module.css\";\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n    inputClassName?: string\n};\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName, inputClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e); // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value);\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        e.key === \"Enter\" // если нажата кнопка Enter\n        && onEnter // и есть пропс onEnter\n        && onEnter(); // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${ spanClassName ? spanClassName : ''}`;\n\n    const finalInputClassName = `${s.errorInput} ${ className ? className : ''}`; // need to fix with (?:) and s.superInput\n\n    return (\n        <div className={s.overlayInput}>\n            <input\n                placeholder = {'enter your text'}\n                type={\"text\"}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={ finalInputClassName }\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            { error && <span className={finalSpanClassName}> { error } </span> }\n        </div>\n\n    );\n}\n\nexport default SuperInputText;\n"]},"metadata":{},"sourceType":"module"}